---
description: 
globs: src/**/*.cs
---
# PlexLocalScan backend for mediaflick

- is a .NET 9 ASPCore app
- uses Minimal API
- uses Dependency Injection
- uses Serilog for logging
- uses Entity Framework Core for data persistence
- uses SQLite database

## Details

### PlexLocalScan.Api
Is the Main project that gets built.
It's Microsoft.NET.Sdk.Web

### PlexLocalScan.Shared
This holds every background job like symlink creation, search on the movie database TMDb using TMDBLib

### PlexLocalScan.Data
Holds the EFCore Project

### PlexLocalScan.Core
Holds Definitions about Media as Movies and TvShows

### PlexLocalScan.SignalR
Handles real-time notifications to frontend clients

## Key Features

### File Processing
- Files are scanned and tracked in the [ScannedFile](mdc:src/PlexLocalScan.Core/Tables/ScannedFile.cs) entity
- Each file has FileSize (long) and FileHash (SHA-256 string) computed during processing
- Hash computation done in [FileProcessing.cs](mdc:src/PlexLocalScan.Shared/Services/FileProcessing.cs) using SHA-256
- Files can have status: Processing, Success, Failed, Duplicate

### Database Context
- Main context is [PlexScanContext](mdc:src/PlexLocalScan.Data/Data/PlexScanContext.cs)
- Context operations handled by [ContextService](mdc:src/PlexLocalScan.Shared/DbContext/Services/ContextService.cs)
- Duplicate entries created for multi-episode files (EpisodeNumber2)

### API Endpoints
- ScannedFiles endpoints in [ScannedFilesController](mdc:src/PlexLocalScan.Api/ScannedFiles/ScannedFilesController.cs)
- Stats endpoint returns file counts and totals
- DTOs defined in [ScannedFileDto](mdc:src/PlexLocalScan.Core/Tables/ScannedFileDto.cs)

### Real-time Updates
- SignalR hub for real-time file tracking notifications
- Clients receive updates when files are added, updated, or removed
- Notifications sent via [NotificationService](mdc:src/PlexLocalScan.SignalR/Services/NotificationService.cs)

## Directory Structure
```
src
├── PlexLocalScan.Abstractions
├── PlexLocalScan.Api
│   ├── Config
│   ├── Logging
│   ├── MediaLookup
│   ├── Properties
│   ├── ScannedFiles
│   │   └── Models
│   ├── ServiceCollection
│   └── Symlink
├── PlexLocalScan.Core
│   ├── Helper
│   ├── Media
│   ├── Series
│   └── Tables
├── PlexLocalScan.Data
│   ├── Data
│   └── Migrations
├── PlexLocalScan.Shared
│   ├── Configuration
│   │   └── Options
│   ├── DbContext
│   │   ├── Interfaces
│   │   └── Services
│   ├── MediaDetection
│   │   ├── Interfaces
│   │   ├── Options
│   │   └── Services
│   ├── Plex
│   │   ├── Interfaces
│   │   └── Services
│   ├── Services
│   ├── Symlinks
│   │   ├── Interfaces
│   │   └── Services
│   └── TmDbMediaSearch
│       ├── Interfaces
│       └── Services
├── PlexLocalScan.SignalR
│   ├── Hubs
│   └── Services
└── PlexLocalScan.Test
    ├── Integration
    └── Services

## Development Notes

### Database Migrations
- Use EF Core migrations for schema changes
- Migration commands: `dotnet ef migrations add <name> -p src/PlexLocalScan.Data -s src/PlexLocalScan.Api`
- Update database: `dotnet ef database update -p src/PlexLocalScan.Data -s src/PlexLocalScan.Api`

### File Size and Hash Implementation
- FileSize and FileHash are nullable fields on ScannedFile
- Hash computed using SHA-256 during file processing
- Both fields copied to duplicate entries for multi-episode files
- Stats API can aggregate total file sizes (all files and successful files only)

### API Patterns
- Controllers use static methods with dependency injection
- Minimal API routing in separate routing classes
- DTOs used for API responses to control serialization
- Paged results for large datasets
